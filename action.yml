name: "SSH File Transfer"
description: "Transfer files or folders to a remote server via SSH"
author: "KellyDC"
inputs:
  host:
    description: "SSH host to connect to"
    required: true
  port:
    description: "SSH port"
    required: false
    default: "22"
  username:
    description: "SSH username"
    required: true
  key:
    description: "SSH private key"
    required: true
  passphrase:
    description: "Passphrase for the SSH private key"
    required: false
  source:
    description: "Source file or directory to transfer"
    required: true
  destination:
    description: "Destination path on the remote server"
    required: true
  direction:
    description: "Transfer direction"
    required: false
    default: "upload"
  recursive:
    description: "Transfer files recursively"
    required: false
    default: false
  flags:
    description: "Additional flags to pass to the `scp` command"
    required: false
    default: ""
  strict_host_key_checking:
    description: "Enable strict host key checking"
    required: false
    default: "true"
outputs:
  success:
    description: "File transfer was successful"
  error:
    description: "An error occurred during file transfer"

runs:
  using: "composite"
  steps:
    - name: Setup SSH key and configuration
      shell: bash
      run: |
        set -e
        # Create SSH directory with correct permissions
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Generate a unique key filename to avoid conflicts with existing keys
        SSH_KEY_FILE="$HOME/.ssh/sshft_key_$(date +%s)_$RANDOM"
        SSH_CONFIG_FILE="$HOME/.ssh/sshft_config_$(date +%s)_$RANDOM"
        SSH_KNOWN_HOSTS="$HOME/.ssh/sshft_known_hosts_$(date +%s)_$RANDOM"
        
        # Export the key path for other steps to use
        echo "SSH_KEY_FILE=$SSH_KEY_FILE" >> $GITHUB_ENV
        echo "SSH_CONFIG_FILE=$SSH_CONFIG_FILE" >> $GITHUB_ENV
        echo "SSH_KNOWN_HOSTS=$SSH_KNOWN_HOSTS" >> $GITHUB_ENV
        
        # Save SSH key with proper permissions (before writing content)
        touch "$SSH_KEY_FILE"
        chmod 600 "$SSH_KEY_FILE"
        echo "${{ inputs.key }}" > "$SSH_KEY_FILE"
        
        # Verify the key is valid
        if ! ssh-keygen -l -f "$SSH_KEY_FILE" &>/dev/null; then
          echo "Error: The provided SSH key appears to be invalid"
          rm -f "$SSH_KEY_FILE"
          exit 1
        fi
        
        # Create SSH config with appropriate security settings
        printf "Host %s\nPort %s\nUser %s\nIdentityFile %s\nBatchMode yes\nConnectTimeout 30\nServerAliveInterval 60\nServerAliveCountMax 10\n" "${{ inputs.host }}" "${{ inputs.port }}" "${{ inputs.username }}" "$SSH_KEY_FILE" > "$SSH_CONFIG_FILE"
        
        # Configure host key checking based on input
        if [ "${{ inputs.strict_host_key_checking }}" = "false" ]; then
          echo "  StrictHostKeyChecking no" >> "$SSH_CONFIG_FILE"
          echo "  UserKnownHostsFile=/dev/null" >> "$SSH_CONFIG_FILE"
        else
          # First try to scan the host key
          touch "$SSH_KNOWN_HOSTS"
          chmod 600 "$SSH_KNOWN_HOSTS"
          ssh-keyscan -p ${{ inputs.port }} -H ${{ inputs.host }} >> "$SSH_KNOWN_HOSTS" 2>/dev/null || true
          echo "  StrictHostKeyChecking yes" >> "$SSH_CONFIG_FILE"
          echo "  UserKnownHostsFile=$SSH_KNOWN_HOSTS" >> "$SSH_CONFIG_FILE"
        fi
        
        chmod 600 "$SSH_CONFIG_FILE"
        
        # Handle SSH key passphrase if provided
        if [ -n "${{ inputs.passphrase }}" ]; then
          eval $(ssh-agent -s)
          echo "${{ inputs.passphrase }}" | ssh-add "$SSH_KEY_FILE"
        fi

    - name: Verify SSH connection
      shell: bash
      run: |
        if ! ssh -F "$SSH_CONFIG_FILE" ${{ inputs.host }} "echo SSH connection successful"; then
          echo "Error: Failed to establish SSH connection"
          exit 1
        fi

    - name: Transfer files
      shell: bash
      id: transfer
      run: |
        set -e
        echo "Starting file transfer..."
        
        # Prepare command based on inputs
        if [[ "${{ inputs.direction }}" == "upload" ]]; then
          # Upload mode
          if [[ "${{ inputs.recursive }}" == "true" ]] || [ -d "${{ inputs.source }}" ]; then
            transfer_cmd="scp -F \"$SSH_CONFIG_FILE\" -r"
          else
            transfer_cmd="scp -F \"$SSH_CONFIG_FILE\""
          fi
          
          # Add any additional flags
          if [ -n "${{ inputs.flags }}" ]; then
            transfer_cmd+=" ${{ inputs.flags }}"
          fi
          
          # Execute the transfer
          if eval ${transfer_cmd} "\"${{ inputs.source }}\"" ${{ inputs.host }}:\"${{ inputs.destination }}\"; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "File transfer completed successfully"
          else
            echo "error=File transfer failed" >> $GITHUB_OUTPUT
            exit 1
          fi
        else
          # Download mode
          if [[ "${{ inputs.recursive }}" == "true" ]]; then
            transfer_cmd="scp -F \"$SSH_CONFIG_FILE\" -r"
          else
            transfer_cmd="scp -F \"$SSH_CONFIG_FILE\""
          fi
          
          # Add any additional flags
          if [ -n "${{ inputs.flags }}" ]; then
            transfer_cmd+=" ${{ inputs.flags }}"
          fi
          
          # Execute the transfer
          if eval ${transfer_cmd} ${{ inputs.host }}:\"${{ inputs.source }}\" "\"${{ inputs.destination }}\""; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "File transfer completed successfully"
          else
            echo "error=File transfer failed" >> $GITHUB_OUTPUT
            exit 1
          fi
        fi

    - name: Cleanup SSH files securely
      shell: bash
      if: always()
      run: |
        # Terminate any ssh-agent process
        if [ -n "$SSH_AGENT_PID" ]; then
          ssh-agent -k || true
        fi
        
        # Securely remove SSH files
        if [ -f "$SSH_KEY_FILE" ]; then
          # Overwrite with zeros before deleting
          dd if=/dev/zero of="$SSH_KEY_FILE" bs=1k count=1 conv=notrunc >/dev/null 2>&1 || true
          rm -f "$SSH_KEY_FILE"
        fi
        
        # Remove other temporary SSH files
        rm -f "$SSH_CONFIG_FILE"
        rm -f "$SSH_KNOWN_HOSTS"

branding:
  icon: "upload-cloud" 
  color: "blue"
