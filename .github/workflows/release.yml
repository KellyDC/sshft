name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  actions: read
  security-events: write

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      major_version: ${{ steps.get_version.outputs.major_version }}
      is_prerelease: ${{ steps.get_version.outputs.is_prerelease }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version info
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Extract major version (e.g., v1 from v1.2.3)
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
          echo "major_version=$MAJOR_VERSION" >> $GITHUB_OUTPUT

          # Check if prerelease (contains alpha, beta, rc, or pre)
          if [[ $VERSION =~ (alpha|beta|rc|pre) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate action.yml syntax
        run: |
          # Check if action.yml exists and is valid YAML
          if ! python -c "import yaml; yaml.safe_load(open('action.yml'))" 2>/dev/null; then
            echo "❌ action.yml is not valid YAML"
            exit 1
          fi
          echo "✅ action.yml syntax is valid"

      - name: Validate action metadata
        run: |
          # Install yq for better YAML validation
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

          # Check required fields in action.yml
          REQUIRED_FIELDS=("name" "description" "runs" "branding")
          for field in "${REQUIRED_FIELDS[@]}"; do
            if ! yq eval "has(\"$field\")" action.yml | grep -q true; then
              echo "❌ Missing required field: $field"
              exit 1
            fi
          done

          # Validate inputs have descriptions
          if yq eval '.inputs | length' action.yml | grep -q -v '^0$'; then
            yq eval '.inputs | to_entries | .[] | select(.value.description == null) | .key' action.yml | while read input; do
              if [ -n "$input" ]; then
                echo "❌ Input '$input' missing description"
                exit 1
              fi
            done
          fi

          echo "✅ Action metadata is valid"

      - name: Validate shell script syntax
        run: |
          # Extract and validate shell scripts from action.yml
          echo "Extracting shell scripts from action.yml for validation..."

          # Create temporary directory for script validation
          mkdir -p /tmp/script_validation

          # Extract each step's run script and validate separately
          step_count=0
          yq eval '.runs.steps[] | select(has("run")) | .run' action.yml | while IFS= read -r -d '' script || [[ -n "$script" ]]; do
            if [ -n "$script" ] && [ "$script" != "null" ]; then
              step_count=$((step_count + 1))
              script_file="/tmp/script_validation/step_${step_count}.sh"
              
              # Write the complete script to a temporary file
              echo "#!/bin/bash" > "$script_file"
              echo "$script" >> "$script_file"
              
              # Validate the script syntax
              if ! bash -n "$script_file" 2>/dev/null; then
                echo "❌ Shell script syntax error found in step $step_count"
                echo "Script content:"
                cat "$script_file"
                exit 1
              else
                echo "✅ Step $step_count script syntax is valid"
              fi
            fi
          done

          echo "✅ Shell script validation completed"

      - name: Run security scans
        run: |
          # Run Trivy vulnerability scanner
          echo "Running Trivy filesystem scan..."
          docker run --rm -v "$PWD:/workspace" \
            aquasec/trivy:latest fs /workspace \
            --format table \
            --exit-code 0 \
            --severity HIGH,CRITICAL

          # Run secret detection
          echo "Running secret detection..."
          docker run --rm -v "$PWD:/pwd" \
            trufflesecurity/trufflehog:latest \
            filesystem /pwd \
            --only-verified \
            --json || true

          echo "✅ Security scans completed"

  test-action:
    runs-on: ubuntu-latest
    needs: validate
    continue-on-error: true # Don't fail release if test fails

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate action structure
        run: |
          echo "Validating action structure for release..."

          # Test that action would work with proper inputs (validation only)
          python3 -c "
          import yaml
          import sys

          with open('action.yml', 'r') as f:
              action = yaml.safe_load(f)

          required_inputs = []
          for name, details in action.get('inputs', {}).items():
              if details.get('required', False):
                  required_inputs.append(name)

          print(f'Required inputs: {required_inputs}')

          # Validate that all required inputs are documented
          expected_required = ['host', 'username', 'key', 'source', 'destination']
          for req in expected_required:
              if req not in required_inputs:
                  print(f'ERROR: {req} should be required')
                  sys.exit(1)

          print('✅ Action structure validation passed')
          "

      - name: Test action syntax
        run: |
          echo "Testing action syntax and structure..."

          # Create test files
          mkdir -p test_data
          echo "test content" > test_data/test_file.txt

          # Generate test SSH key for format validation
          ssh-keygen -t rsa -b 2048 -f test_key -N "" -C "test@example.com"

          # Validate the SSH key format
          if ssh-keygen -l -f test_key &>/dev/null; then
            echo "✅ SSH key generation and validation works"
          else
            echo "❌ SSH key validation failed"
            exit 1
          fi

          echo "✅ Action syntax tests completed"

  release:
    runs-on: ubuntu-latest
    needs: [validate, test-action]
    if: always() && needs.validate.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" HEAD)
          fi

          # Save changelog to file and output
          echo "## Changes" > changelog.md
          echo "$CHANGELOG" >> changelog.md

          # Set output (escape newlines for GitHub Actions)
          {
            echo 'changelog<<EOF'
            cat changelog.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          name: Release ${{ needs.validate.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            action.yml
            README.md
            LICENSE
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update major version tag
        if: needs.validate.outputs.is_prerelease == 'false'
        run: |
          # Update major version tag (e.g., v1) to point to latest release
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          MAJOR_TAG="${{ needs.validate.outputs.major_version }}"
          git tag -fa $MAJOR_TAG -m "Update $MAJOR_TAG to ${{ needs.validate.outputs.version }}"
          git push origin $MAJOR_TAG --force

      - name: Notify on failure
        if: failure()
        run: |
          echo "🚨 Release failed for ${{ needs.validate.outputs.version }}"
          echo "Please check the workflow logs and fix any issues."
